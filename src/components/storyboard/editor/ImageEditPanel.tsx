'use client'
import React, { useEffect, useMemo, useRef, useState } from 'react'
import { Upload, ImagePlus, Plus, X } from 'lucide-react'
import Image from 'next/image'
import type { SupabaseCharacter } from '@/lib/supabase'
import { buildPromptWithCharacterMentions, resolveCharacterMentions } from '@/lib/characterMentions'

type Props = {
  projectId: string
  frameId: string
  currentImageUrl?: string
  imagePrompt?: string
  characters?: SupabaseCharacter[]
  onImageUpdated?: (url: string, metadata?: { key?: string; size?: number; type?: string }) => void
  isAutoGenerated?: boolean
}

const ImageEditPanel: React.FC<Props> = ({
  projectId,
  frameId,
  currentImageUrl,
  imagePrompt,
  characters,
  onImageUpdated,
  isAutoGenerated = false,
}) => {
  const fileInputRef = useRef<HTMLInputElement | null>(null)
  const [prompt, setPrompt] = useState<string>(imagePrompt || '')
  const [uploading, setUploading] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [references, setReferences] = useState<string[]>([])
  const refFileInputs = useRef<Record<number, HTMLInputElement | null>>({})
  const [imageLoadError, setImageLoadError] = useState<boolean>(false)

  const projectCharacters = useMemo(() => characters ?? [], [characters])

  useEffect(() => {
    if (typeof imagePrompt === 'string') {
      setPrompt(imagePrompt)
    } else {
      setPrompt('')
    }
  }, [imagePrompt, frameId])

  const resolvedMentions = useMemo(
    () => resolveCharacterMentions(prompt, projectCharacters),
    [prompt, projectCharacters]
  )

  const mentionImageUrls = useMemo(() => {
    const unique = new Set<string>()
    resolvedMentions.forEach(mention => {
      mention.imageUrls.forEach(url => unique.add(url))
    })
    return Array.from(unique)
  }, [resolvedMentions])

  const canGenerate = useMemo(() => {
    const hasReference =
      references.length > 0 || !!currentImageUrl || mentionImageUrls.length > 0
    return hasReference && prompt.trim().length > 0
  }, [references.length, currentImageUrl, mentionImageUrls.length, prompt])

  const handleRemoveMainImage = () => {
    onImageUpdated?.('')
    setImageLoadError(false)
  }

  const handleImageLoad = () => {
    setImageLoadError(false)
  }

  const handleImageError = () => {
    setImageLoadError(true)
  }

  const handlePickFile = () => fileInputRef.current?.click()

  const handleUpload = async (file: File) => {
    if (!file) return
    setError(null)
    setUploading(true)
    try {
      // Ï¶âÏãú ÎØ∏Î¶¨Î≥¥Í∏∞ (Î°úÏª¨ Blob URL)
      const previewUrl = URL.createObjectURL(file)
      console.log('[ImageEditPanel] Local preview URL created:', previewUrl)
      onImageUpdated?.(previewUrl)

      const form = new FormData()
      form.append('file', file)
      form.append('projectId', projectId || 'empty')
      form.append('frameId', frameId || 'empty')
      console.log('[ImageEditPanel] Uploading to server...')
      const res = await fetch('/api/upload-image', { method: 'POST', body: form })
      const data = await res.json()
      console.log('[ImageEditPanel] Upload response:', data)
      if (!res.ok || !data?.success) throw new Error(data?.error || 'Upload failed')
      const url: string = data.publicUrl || data.signedUrl || ''
      if (!url) throw new Error('No URL returned')
      console.log('[ImageEditPanel] Server URL received:', url)
      onImageUpdated?.(url, {
        key: data.key,
        size: data.size,
        type: data.type,
      })
      // Î°úÏª¨ blob URL Ï†ïÎ¶¨
      URL.revokeObjectURL(previewUrl)
    } catch (error: unknown) {
      console.error('[ImageEditPanel] Upload error:', error)
      const message = error instanceof Error ? error.message : 'Upload failed'
      setError(message)
      // ÏóÖÎ°úÎìú Ïã§Ìå® Ïãú Î°úÏª¨ URL Ïú†ÏßÄ (ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º Î≥º Ïàò ÏûàÎèÑÎ°ù)
      console.log('[ImageEditPanel] Keeping local preview URL due to upload failure')
    } finally {
      setUploading(false)
    }
  }

  const handleFileChange: React.ChangeEventHandler<HTMLInputElement> = e => {
    const f = e.target.files?.[0]
    if (f) handleUpload(f)
    e.currentTarget.value = ''
  }

  const handleAddReference = () => {
    const newIndex = references.length
    setReferences(prev => [...prev, ''])
    // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú referenceÏùò ÌååÏùº inputÏùÑ Ï¶âÏãú ÌÅ¥Î¶≠
    setTimeout(() => {
      const input = refFileInputs.current[newIndex]
      input?.click()
    }, 0)
  }
  const handleRemoveReference = (idx: number) =>
    setReferences(prev => prev.filter((_, i) => i !== idx))
  const handleChangeReference = (idx: number, url: string) =>
    setReferences(prev => prev.map((v, i) => (i === idx ? url : v)))

  const handlePickReferenceFile = (idx: number) => {
    const input = refFileInputs.current[idx]
    input?.click()
  }

  const handleUploadReferenceFile = async (idx: number, file: File | null) => {
    if (!file) return
    setError(null)
    try {
      // Ï¶âÏãú Ïç∏ÎÑ§Ïùº ÎØ∏Î¶¨Î≥¥Í∏∞
      const previewUrl = URL.createObjectURL(file)
      console.log('[ImageEditPanel] Reference preview URL created:', previewUrl)
      handleChangeReference(idx, previewUrl)

      const form = new FormData()
      form.append('file', file)
      form.append('projectId', projectId || 'empty')
      form.append('frameId', frameId || 'empty')
      console.log('[ImageEditPanel] Uploading reference to server...')
      const res = await fetch('/api/upload-image', { method: 'POST', body: form })
      const data = await res.json()
      console.log('[ImageEditPanel] Reference upload response:', data)
      if (!res.ok || !data?.success) throw new Error(data?.error || 'Upload failed')
      const url: string = data.publicUrl || data.signedUrl || ''
      if (!url) throw new Error('No URL returned')
      console.log('[ImageEditPanel] Reference server URL received:', url)
      handleChangeReference(idx, url)
      // Î°úÏª¨ blob URL Ï†ïÎ¶¨
      URL.revokeObjectURL(previewUrl)
    } catch (error: unknown) {
      console.error('[ImageEditPanel] Reference upload error:', error)
      const message = error instanceof Error ? error.message : 'Reference upload failed'
      setError(message)
    }
  }

  const handleGenerate = async () => {
    if (!canGenerate) return
    setError(null)
    setGenerating(true)
    try {
      const trimmedPrompt = prompt.trim()
      const requestPrompt = buildPromptWithCharacterMentions(trimmedPrompt, resolvedMentions)
      const explicitReferences = references
        .map(url => url.trim())
        .filter(url => url && /^https?:\/\//i.test(url))
      const uniqueUrls = new Set<string>()
      if (currentImageUrl) {
        uniqueUrls.add(currentImageUrl)
      }
      explicitReferences.forEach(url => uniqueUrls.add(url))
      mentionImageUrls.forEach(url => uniqueUrls.add(url))
      const image_urls = Array.from(uniqueUrls)
      const res = await fetch('/api/image-edit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: requestPrompt,
          image_urls,
          projectId,
          frameId,
          numImages: 1,
          output_format: 'jpeg',
        }),
      })
      const data = await res.json()
      if (!res.ok || !data?.success || !Array.isArray(data.images) || data.images.length === 0) {
        throw new Error(data?.error || 'Image edit failed')
      }
      onImageUpdated?.(data.images[0])
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : 'Failed to generate'
      setError(message)
    } finally {
      setGenerating(false)
    }
  }

  return (
    <div className="flex flex-col gap-6 p-4 text-sm">
      {/* Auto-generated storyboard notice */}
      {isAutoGenerated && (
        <div className="text-blue-400 bg-blue-900/30 border border-blue-700 rounded p-3 text-sm">
          üí° This storyboard was auto-generated from a script. You can still upload custom images to
          replace the AI-generated ones.
        </div>
      )}

      {/* Thumbnail / Upload */}
      <div>
        <div className="text-sm font-semibold tracking-wide text-neutral-300 uppercase mb-3">
          Image
        </div>
        {currentImageUrl ? (
          <div className="relative">
            {imageLoadError ? (
              <div className="w-full h-40 flex flex-col items-center justify-center rounded border border-neutral-700 bg-neutral-800 text-neutral-400">
                <div className="text-[10px] mb-1">‚ö†Ô∏è Image failed to load</div>
                <div className="text-[9px] text-neutral-500">
                  URL: {currentImageUrl.slice(0, 50)}...
                </div>
                <button
                  type="button"
                  onClick={handleRemoveMainImage}
                  className="mt-2 px-2 py-1 text-[10px] rounded border border-neutral-600 text-white bg-red-600/80 hover:bg-red-600"
                >
                  Remove broken image
                </button>
              </div>
            ) : (
              <div className="relative w-full" style={{ maxHeight: '300px', height: '300px' }}>
                <Image
                  src={currentImageUrl}
                  alt="current"
                  fill
                  className="object-contain rounded border border-neutral-700"
                  onLoad={handleImageLoad}
                  onError={handleImageError}
                />
              </div>
            )}
            {!imageLoadError && (
              <div className="absolute bottom-2 right-2 flex gap-1">
                <button
                  type="button"
                  onClick={handlePickFile}
                  className="px-2 py-1 rounded border border-neutral-600 text-white bg-black/60 hover:bg-black/80"
                  aria-label="Upload new image"
                >
                  <Upload className="w-3 h-3" />
                </button>
                <button
                  type="button"
                  onClick={handleRemoveMainImage}
                  className="px-2 py-1 rounded border border-neutral-600 text-white bg-red-600/80 hover:bg-red-600"
                  aria-label="Remove image"
                >
                  <X className="w-3 h-3" />
                </button>
              </div>
            )}
          </div>
        ) : (
          <button
            type="button"
            onClick={handlePickFile}
            className="w-full flex flex-col items-center justify-center rounded border border-dashed border-neutral-600 bg-neutral-800 text-neutral-300 hover:bg-neutral-700"
            style={{ minHeight: '200px', maxHeight: '300px' }}
            aria-label="Upload image"
          >
            <ImagePlus className="w-6 h-6 mb-1" />
            Upload image
          </button>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          className="hidden"
          onChange={handleFileChange}
        />
        {uploading && <div className="mt-2 text-sm text-neutral-400">Uploading...</div>}
      </div>

      {/* References */}
      <div>
        <h3 className="text-sm font-semibold tracking-wide text-neutral-300 uppercase mb-3">
          Reference Images
        </h3>
        <div className="grid grid-cols-2 gap-3">
          {references.map((url, idx) => (
            <div key={idx} className="relative">
              <div className="aspect-square rounded border border-neutral-700 bg-neutral-900 flex items-center justify-center overflow-hidden">
                {url ? (
                  <Image src={url} alt={`ref-${idx}`} fill className="object-cover" />
                ) : (
                  <div className="text-center">
                    <Upload className="w-6 h-6 mx-auto mb-1 text-neutral-500" />
                    <span className="text-xs text-neutral-500">Upload</span>
                  </div>
                )}
              </div>
              <input
                ref={el => {
                  refFileInputs.current[idx] = el
                }}
                type="file"
                accept="image/*"
                className="hidden"
                onChange={e => handleUploadReferenceFile(idx, e.target.files?.[0] || null)}
              />
              <button
                type="button"
                onClick={() => handlePickReferenceFile(idx)}
                className="absolute inset-0 w-full h-full rounded border-2 border-dashed border-neutral-600 bg-transparent hover:bg-neutral-800/20 transition-colors"
                aria-label="Upload reference"
              />
              <button
                type="button"
                onClick={() => handleRemoveReference(idx)}
                className="absolute top-1 right-1 w-6 h-6 rounded-full bg-red-600/80 hover:bg-red-600 text-white flex items-center justify-center"
                aria-label="Remove reference"
              >
                <X className="w-3 h-3" />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddReference}
            className="aspect-square rounded border-2 border-dashed border-neutral-600 bg-neutral-800 text-neutral-300 hover:bg-neutral-700 flex flex-col items-center justify-center"
          >
            <Plus className="w-6 h-6 mb-1" />
            <span className="text-xs">Add Reference</span>
          </button>
        </div>
      </div>

      {/* Prompt */}
      <div>
        <div className="text-sm font-semibold text-neutral-300 mb-2">Prompt</div>
        <textarea
          value={prompt}
          onChange={e => setPrompt(e.target.value)}
          rows={3}
          className="w-full border border-neutral-600 rounded px-2 py-1 resize-y bg-neutral-800 text-white"
          placeholder="Describe how to edit the image using the references (e.g., add a leather bag, change jacket color to black, add silver accessories)"
        />
        {resolvedMentions.length > 0 && (
          <div className="mt-2 text-xs text-neutral-400">
            Using character references: {resolvedMentions.map(m => `@${m.slug}`).join(', ')}
          </div>
        )}
      </div>

      {/* Generate */}
      <div className="pt-2">
        <button
          type="button"
          onClick={handleGenerate}
          disabled={!canGenerate || generating}
          className={`w-full px-3 py-2 rounded text-sm border transition-colors ${canGenerate && !generating ? 'border-neutral-600 text-white hover:bg-neutral-800' : 'border-neutral-800 text-neutral-500 cursor-not-allowed'}`}
          aria-label="Generate image"
        >
          {generating ? 'Generating...' : 'Generate image (Gemini 2.5 Flash)'}
        </button>
        {error && <div className="mt-2 text-sm text-red-400">{error}</div>}
      </div>
    </div>
  )
}

export default ImageEditPanel
