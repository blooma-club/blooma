# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  - ‘AI 스토리보드’는 크리에이터가 아이디어 입력만으로 6장 카드 형식 스토리보드를 AI로 즉시 생성·편집·공유할 수 있는 SaaS 웹 서비스이다.  
- 핵심 기술 방향은 Next.js 15 이상 기반의 단일 프런트엔드, Supabase 기반의 서버리스 백엔드, 외부 AI API 호출을 최소 지연으로 연결하는 심플 아키텍처이다.

- **핵심 기술 스택**  
- 프런트엔드: Next.js 15 이상, React 18 이상, TypeScript, Zustand  
- 런타임: Node.js 20 이상 (Edge Functions & 로컬 개발용)  
  - 백엔드: Supabase(PostgreSQL, Edge Functions, Storage, Auth)  
  - AI: Google AI(Gemini), Replicate 이미지 모델  
  - 인프라: Vercel, Supabase Managed Service  

- **주요 기술 목표**  
  - 페이지 로드 ≤ 1.5초, 생성 요청 30초 내 완료  
  - 99.9 % 가용성, 에러율 < 0.5 %  
  - 월 100만 호출 대비 수평 확장 가능 구조 확보  

- **핵심 기술 가정**  
  - 초기 사용량은 월간 1만 MAU 기준이며, Supabase 무료/프로 티어로도 감당 가능  
  - 모든 AI 연산은 외부 API 호출(OpenAI, Replicate)로 처리하며 자체 모델 학습은 Phase 3 이후 검토  
  - Vercel 및 Supabase의 기본 모니터링·오토스케일링 기능으로 성능 목표 충족 가능  

## 2. Tech Stack

| Category              | Technology / Library                  | Reasoning (선정 사유)                                   |
| --------------------- | ------------------------------------- | ------------------------------------------------------- |
| UI 프레임워크         | Next.js 15 이상, React 18 이상         | React 생태계 활용, 최신 서버 컴포넌트 및 동시성 지원    |
| 런타임                | Node.js 20 이상                         | Edge Functions 실행 및 로컬 개발 표준 환경               |
| 언어                  | TypeScript                           | 정적 타입으로 오류 감소, 대규모 협업 대비               |
| 상태 관리            | Zustand (미정)                           | 경량, 보일러플레이트 최소, 서버 컴포넌트와 호환         |
| 디자인 시스템        | Tailwind CSS                          | 빠른 스타일링, WCAG 2.1 AA 충족 지원                    |
| 인증                  | Supabase Auth (OAuth 2.0)             | 구글 로그인 기본 지원, Row Level Security 연동          |
| API 런타임           | Supabase Edge Functions               | 서버리스, PostgreSQL 근접 실행으로 레이턴시 최소화      |
| 데이터베이스         | Supabase PostgreSQL                   | 관계형 데이터, 버전 관리, 멀티테넌트 RLS                |
| 파일 스토리지        | Supabase Storage + CDN                | 이미지·PDF·MP4 저장, 글로벌 캐싱                        |
| AI 텍스트            | Gemini (미정)                      | 고품질 콘텐츠 생성, Google 인프라 활용                  |
| AI 이미지            | Replicate 모델 (미정)                   | PNG 생성, Custom prompt 조정 용이                      |                     |
| 배포                 | Vercel                                | Next.js 최적화, 프리뷰 URL, 자동 CI/CD                  |
| 결제                 | Paypal, Toss                          | SaaS 구독 과금, PCI 부담 최소화                        |                      |
| 모니터링            | Vercel Analytics, Supabase Logs        | 추가 비용 없이 기본 메트릭 확보                         |

## 3. System Architecture Design

### Top-Level building blocks
- **프런트엔드(Next.js 15 이상)**  
  - 페이지 라우팅, 카드 편집 캔버스, 상태 관리(Zustand), Tailwind UI  
- **API 게이트웨이(Supabase Edge Functions)**  
  - AI 프록시 호출, 비즈니스 로직, 멀티테넌트 RLS 적용  
- **데이터 계층(Supabase PostgreSQL & Storage)**  
  - 프로젝트, 카드, 버전, 결제, 사용자 테이블 / 이미지·파일 저장  
- **AI 서비스(OpenAI, Replicate 미정)**  
  - Google Gemini 프롬프트 엔드포인트, 이미지 생성 모델  

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    B(Next.js 15+ Browser) --> C(Supabase Edge Functions)
    C --> D(PostgreSQL)
    C --> E(Storage CDN)
    C --> F(OpenAI & Replicate API)
    D -->|RLS| C
    C --> G(Stripe)
    C --> H(Google Drive)
    C --> I(Slack Webhook)
```

- 브라우저는 Supabase 클라이언트를 통해 Edge Functions 및 Realtime 소켓에 직접 연결  
- Edge Functions는 RLS가 적용된 PostgreSQL 질의, Storage 업로드, AI API 호출을 담당  
- Stripe, Google Drive, Slack은 Edge Functions를 통해 서버리스 통합  
- 모든 정적 자산은 Vercel 및 Supabase CDN으로 캐싱하여 전 세계 레이턴시 최소화  

### Code Organization & Convention

**도메인 기반 구조**  
- user, project, storyboard, billing, integration 등 비즈니스 컨텍스트별 모듈 구분  
- 각 모듈 내에 `api`, `components`, `hooks`, `services`, `types` 하위 폴더 배치  

**디렉터리 트리 예시**
```
/
├── app/                       # Next.js 15 이상 라우트 기반
│   ├── layout.tsx
│   ├── page.tsx
│   └── storyboard/
│       ├── [id]/
│       │   ├── page.tsx
│       │   └── editor.tsx
│       └── new/
├── components/
│   ├── canvas/
│   ├── cards/
│   └── ui/
├── styles/
├── hooks/
├── lib/
│   ├── supabase.ts
│   └── ai.ts
├── services/
│   ├── projectService.ts
│   └── billingService.ts
├── store/                     # Zustand
├── supabase/                  # Edge Functions
│   └── functions/
│       ├── generateStory.ts
│       └── webhookStripe.ts
├── prisma/                    # (선택) 타입 생성용 스키마
├── public/
├── utils/
└── tests/
```

### Data Flow & Communication Patterns
- **클라이언트 ↔ 서버**: Supabase 클라이언트 SDK로 Edge Function RPC 호출(Public REST) 및 Realtime WebSocket 수신  
- **DB 인터랙션**: Edge Function 내부에서 `supabase-js`로 SQL 실행, RLS 정책으로 테넌트 분리  
- **외부 서비스**: Edge Function이 AI·Stripe 등 HTTPS 호출, 비동기 처리를 위해 Supabase Queue(Table + cron) 활용  
- **실시간 동기화**: 카드 편집 이벤트를 Supabase Realtime 채널로 브로드캐스트하여 동시 편집 지원  
- **데이터 일관성**: 단일 DB 트랜잭션 사용, 이미지 파일 업로드 완료 후 메타데이터 레코드 커밋 패턴 적용  

## 4. Performance & Optimization Strategy
- 정적 리소스(Vercel Edge Network) 캐싱 및 Next.js `app/` 서버 컴포넌트로 초기 렌더링 비용 최소화  
- AI 프롬프트와 이미지 생성 결과를 Supabase KV(Cache table) 30분 TTL로 캐싱하여 비용·지연 감소  
- 데이터베이스 인덱싱: `user_id`, `project_id`, `updated_at` 조합 인덱스, JSONB 필드 최소화  
- 프런트엔드 코드 스플리팅과 Tailwind JIT 모드로 번들 크기 150 kB 이하 유지  

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (MVP)  M0~M2
- 프로젝트·사용자·카드 기본 테이블, RLS 정책 설정  
- AI 텍스트·이미지 생성 Edge Function (`generateStory`)  
- 카드 캔버스 에디터, Drag & Drop, PDF 내보내기  
- Clerk 및 Supabase Auth 연동
- GitHub Actions + Vercel CI/CD 파이프라인 구축  

### Phase 2: Feature Enhancement  M3~M5
- Stripe 구독 결제, 사용량 제한 로직  
- Slack 알림, Google Drive Export, PNG/MP4 내보내기  
- Vercel Analytics, Supabase Logs 기반 성능 튜닝  
- 접근성(WCAG 2.1 AA)·반응형 UI 개선  

### Phase 3: Scaling & Optimization  M6~M8
- 템플릿 마켓, 음성 입력(STT), SEO 태깅, PWA 오프라인 지원  
- 멀티언어 로컬라이제이션(i18n)  
- 캐시 레이어 도입(Redis on Upstash) 및 큐 기반 AI 배치 처리  
- 데이터 백업·복구 자동화, 감사 로그 및 GDPR/CCPA 대응  
- 비용 최적화: OpenAI Token 관리 대시보드, 이미지 CDN 리사이징  

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
- **AI 품질 변동**: 모델 업데이트로 출력 품질 하락 가능 → 버전 고정 및 사용자 평가 루프  
- **스케일 병목**: Edge Function 콜드 스타트 → Vercel `edge` 런타임 + 프리워밍 크론  
- **보안 취약점**: RLS 설정 오류, 파일 업로드 XSS → 정적 파일 서명 URL·MIME 검증  
- **외부 API 실패**: OpenAI/Replicate 장애 → 재시도 로직, 캐시 백업 응답 제공  

### Project Delivery Risks
- **일정 지연**: 프론트 실시간 편집 난이도 → Canvas 라이브러리(react-konva) 사전 PoC  
- **리소스 부족**: 소팀 인력 제한 → 기능 범위 우선순위 조정, 외주 옵션 확보  
- **품질 저하**: 테스트 커버리지 미흡 → Playwright e2e, Vitest 유닛 테스트 목표 60 %  
- **배포 실패**: 환경 변수 누락 → Vercel 환경 변수 관리 정책, 스테이징 검증 파이프라인  
- **컨틴전시**: 주요 API 장애 시 “텍스트 전용 모드”로 서비스 지속, 백업 캐시 제공  

